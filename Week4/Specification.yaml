openapi: 3.0.1
info:
  title: A book API
  description: A simple REST API for books
  version: 1.0.0
servers:
  - url: http://localhost:5000
paths:
  /books:
    get:
      summary: Get all books
      operationId: getBooks
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      operationId: createBook
      requestBody:
        description: Book object to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                type: object
                properties:
                  book:
                    $ref: '#/components/schemas/Book'
  /book/{id}:
    get:
      summary: Get a book by id
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: integer
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                type: object
                properties:
                  book:
                    $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    put:
      summary: Update a book
      operationId: updateBook
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: integer
      requestBody:
        description: Updated book data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  book:
                    $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    delete:
      summary: Delete a book
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          required: true
          description: Book ID
          schema:
            type: integer
      responses:
        '200':
          description: Book deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  book_deleted:
                    $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Effective Java
        author:
          type: string
          example: Joshua Bloch
        date_added:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
    BookInput:
      type: object
      properties:
        title:
          type: string
          example: Effective Java
        author:
          type: string
          example: Joshua Bloch
      required:
        - title
        - author
