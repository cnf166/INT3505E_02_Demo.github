from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from library_api.models.base_model import Model
from library_api import util


class BookUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title=None, author=None):  # noqa: E501
        """BookUpdate - a model defined in OpenAPI

        :param title: The title of this BookUpdate.  # noqa: E501
        :type title: str
        :param author: The author of this BookUpdate.  # noqa: E501
        :type author: str
        """
        self.openapi_types = {
            'title': str,
            'author': str
        }

        self.attribute_map = {
            'title': 'title',
            'author': 'author'
        }

        self._title = title
        self._author = author

    @classmethod
    def from_dict(cls, dikt) -> 'BookUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BookUpdate of this BookUpdate.  # noqa: E501
        :rtype: BookUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self) -> str:
        """Gets the title of this BookUpdate.

        Book title  # noqa: E501

        :return: The title of this BookUpdate.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this BookUpdate.

        Book title  # noqa: E501

        :param title: The title of this BookUpdate.
        :type title: str
        """
        if title is not None and len(title) > 80:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `80`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def author(self) -> str:
        """Gets the author of this BookUpdate.

        Book author  # noqa: E501

        :return: The author of this BookUpdate.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this BookUpdate.

        Book author  # noqa: E501

        :param author: The author of this BookUpdate.
        :type author: str
        """
        if author is not None and len(author) > 40:
            raise ValueError("Invalid value for `author`, length must be less than or equal to `40`")  # noqa: E501
        if author is not None and len(author) < 1:
            raise ValueError("Invalid value for `author`, length must be greater than or equal to `1`")  # noqa: E501

        self._author = author
