from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from library_api.models.base_model import Model
from library_api.models.book import Book
from library_api import util

from library_api.models.book import Book  # noqa: E501

class BookSearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, books=None, total=None, pages=None, current_page=None):  # noqa: E501
        """BookSearchResponse - a model defined in OpenAPI

        :param books: The books of this BookSearchResponse.  # noqa: E501
        :type books: List[Book]
        :param total: The total of this BookSearchResponse.  # noqa: E501
        :type total: int
        :param pages: The pages of this BookSearchResponse.  # noqa: E501
        :type pages: int
        :param current_page: The current_page of this BookSearchResponse.  # noqa: E501
        :type current_page: int
        """
        self.openapi_types = {
            'books': List[Book],
            'total': int,
            'pages': int,
            'current_page': int
        }

        self.attribute_map = {
            'books': 'books',
            'total': 'total',
            'pages': 'pages',
            'current_page': 'current_page'
        }

        self._books = books
        self._total = total
        self._pages = pages
        self._current_page = current_page

    @classmethod
    def from_dict(cls, dikt) -> 'BookSearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BookSearchResponse of this BookSearchResponse.  # noqa: E501
        :rtype: BookSearchResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def books(self) -> List[Book]:
        """Gets the books of this BookSearchResponse.


        :return: The books of this BookSearchResponse.
        :rtype: List[Book]
        """
        return self._books

    @books.setter
    def books(self, books: List[Book]):
        """Sets the books of this BookSearchResponse.


        :param books: The books of this BookSearchResponse.
        :type books: List[Book]
        """

        self._books = books

    @property
    def total(self) -> int:
        """Gets the total of this BookSearchResponse.

        Total number of books matching the search  # noqa: E501

        :return: The total of this BookSearchResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this BookSearchResponse.

        Total number of books matching the search  # noqa: E501

        :param total: The total of this BookSearchResponse.
        :type total: int
        """

        self._total = total

    @property
    def pages(self) -> int:
        """Gets the pages of this BookSearchResponse.

        Total number of pages  # noqa: E501

        :return: The pages of this BookSearchResponse.
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages: int):
        """Sets the pages of this BookSearchResponse.

        Total number of pages  # noqa: E501

        :param pages: The pages of this BookSearchResponse.
        :type pages: int
        """

        self._pages = pages

    @property
    def current_page(self) -> int:
        """Gets the current_page of this BookSearchResponse.

        Current page number  # noqa: E501

        :return: The current_page of this BookSearchResponse.
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page: int):
        """Sets the current_page of this BookSearchResponse.

        Current page number  # noqa: E501

        :param current_page: The current_page of this BookSearchResponse.
        :type current_page: int
        """

        self._current_page = current_page
